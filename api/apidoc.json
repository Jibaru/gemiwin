{
  "openapi": "3.0.0",
  "info": {
    "title": "Gemiwin Chatbot API",
    "description": "An API for interacting with a chatbot. You can create chats, send messages, and retrieve conversation history.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://localhost:8080",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/chats": {
      "get": {
        "summary": "List all chats",
        "description": "Retrieves a list of all chat sessions.",
        "operationId": "listChats",
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of chats.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Chat"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Failed to list chats.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new chat",
        "description": "Creates a new chat session with the first message. The name of the chat will be the content of this first message.",
        "operationId": "createChat",
        "requestBody": {
          "description": "The message content to start the chat.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageRequest"
              },
              "examples": {
                "example1": {
                  "summary": "A simple greeting",
                  "value": {
                    "content": "Hello, who are you?"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully created a new chat and received the bot's response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                },
                "examples": {
                  "example1": {
                    "summary": "Example response for a new chat",
                    "value": {
                      "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                      "name": "Hello, who are you?",
                      "created_at": "2023-10-27T10:00:00Z",
                      "messages": [
                        {
                          "role": "user",
                          "content": "Hello, who are you?",
                          "timestamp": "2023-10-27T10:00:00Z"
                        },
                        {
                          "role": "bot",
                          "content": "I am a helpful assistant powered by Gemini.",
                          "timestamp": "2023-10-27T10:00:01Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to send message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chats/{id}": {
      "get": {
        "summary": "Get a chat by ID",
        "description": "Retrieves the full conversation history for a given chat ID.",
        "operationId": "getChat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the chat to retrieve.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the chat.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "404": {
            "description": "Chat not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a chat by ID",
        "description": "Deletes a chat and its entire message history.",
        "operationId": "deleteChat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the chat to delete.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Chat successfully deleted."
          },
          "500": {
            "description": "Failed to delete chat.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chats/{id}/messages": {
      "post": {
        "summary": "Add a message to a chat",
        "description": "Sends a new message to an existing chat and gets a response from the bot.",
        "operationId": "addMessageToChat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the chat to send a message to.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "The message content.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SendMessageRequest"
              },
               "examples": {
                "example1": {
                  "summary": "A follow-up question",
                  "value": {
                    "content": "What can you do?"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully sent message and received a response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
           "400": {
            "description": "Invalid request body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Chat not found.",
             "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
           "500": {
            "description": "Failed to send message.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "/chats/{id}/messages/{index}": {
        "delete": {
          "summary": "Delete messages from an index",
          "description": "Deletes the message at the specified index and all subsequent messages in a chat.",
          "operationId": "deleteMessagesFromChat",
          "parameters": [
            {
              "name": "id",
              "in": "path",
              "description": "ID of the chat.",
              "required": true,
              "schema": {
                "type": "string",
                "format": "uuid"
              }
            },
            {
              "name": "index",
              "in": "path",
              "description": "Zero-based index of the message to delete (inclusive). All messages after this index will also be removed.",
              "required": true,
              "schema": {
                "type": "integer",
                "minimum": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Chat successfully trimmed.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Chat"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "404": {
              "description": "Chat not found.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            },
            "500": {
              "description": "Failed to delete messages.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/chats/{id}/files": {
      "post": {
        "summary": "Upload a file to a chat",
        "description": "Uploads a file which becomes a 'doc' message. If the provided chat ID is empty or invalid, a new chat will be created.",
        "operationId": "uploadFileToChat",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the chat (use any placeholder such as 'new' to create a chat).",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Binary file to upload.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "content": {
                    "type": "string",
                    "description": "User message associated with the file."
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chat updated with the new document message and bot response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file upload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Chat not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to upload file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chats/files": {
      "post": {
        "summary": "Create a new chat with an uploaded file",
        "description": "Uploads a file as the first message in a new chat session. Returns the created chat with the bot's response.",
        "operationId": "createChatWithFile",
        "requestBody": {
          "description": "Binary file to upload.",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  },
                  "content": {
                    "type": "string",
                    "description": "User message associated with the file."
                  }
                },
                "required": ["file"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chat created with the uploaded document and bot response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Chat"
                }
              }
            }
          },
          "400": {
            "description": "Invalid file upload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to upload file.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/config": {
      "get": {
        "summary": "Get global configuration",
        "description": "Retrieves the current application configuration.",
        "operationId": "getAppConfig",
        "responses": {
          "200": {
            "description": "Successfully retrieved configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppConfig"
                }
              }
            }
          },
          "500": {
            "description": "Failed to load configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update global configuration",
        "description": "Creates or updates the global application configuration.",
        "operationId": "updateAppConfig",
        "requestBody": {
          "description": "Configuration data to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppConfig"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Configuration successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppConfig"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Failed to update configuration.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/chats/{id}/config": {
      "put": {
        "summary": "Update chat configuration",
        "description": "Updates the configuration of a specific chat (e.g., model).",
        "operationId": "updateChatConfig",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the chat whose configuration will be updated.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Configuration values to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChatConfig" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Chat updated with new configuration.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Chat" }
              }
            }
          },
          "400": {
            "description": "Invalid request body.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "404": {
            "description": "Chat not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          },
          "500": {
            "description": "Failed to update configuration.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Chat": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "The unique identifier for the chat."
          },
          "name": {
            "type": "string",
            "description": "The name of the chat, taken from the first message."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the chat was created."
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Message"
            }
          }
        }
      },
      "Message": {
        "type": "object",
        "properties": {
          "role": {
            "type": "string",
            "enum": ["user", "bot"],
            "description": "The role of the sender."
          },
          "type": {
            "type": "string",
            "enum": ["text", "doc"],
            "description": "The kind of message: plain text or document reference."
          },
          "content": {
            "type": "string",
            "description": "Text written by the user. For a document message, this is typically the original filename or a user caption."
          },
          "document": {
            "$ref": "#/components/schemas/Document",
            "nullable": true,
            "description": "Embedded document metadata when type is 'doc'."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the message was sent."
          }
        }
      },
      "Document": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier (filename) of the stored document."
          },
          "name": {
            "type": "string",
            "description": "Original file name uploaded by the user."
          },
          "url": {
            "type": "string",
            "description": "Public URL to download the stored document."
          },
          "content": {
            "type": "string",
            "description": "Extracted textual content of the document (if available).",
            "nullable": true
          }
        }
      },
      "AppConfig": {
        "type": "object",
        "properties": {
          "gemini_api_key": {
            "type": "string",
            "description": "API key used to communicate with Gemini."
          }
        }
      },
      "SendMessageRequest": {
        "type": "object",
        "required": ["content"],
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the message to be sent."
          }
        }
      },
      "ChatConfig": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "LLM model used for this chat.",
            "enum": ["gemini-2.5-pro", "gemini-2.5-flash"],
            "default": "gemini-2.5-pro"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "description": "A description of the error."
          }
        }
      }
    }
  }
} 