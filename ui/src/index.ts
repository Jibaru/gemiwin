import { app, BrowserWindow, session, screen } from 'electron';
import { spawn, type ChildProcess } from 'child_process';
import path from 'path';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Hold reference to the spawned geminiapi process so we can terminate it on app exit
let geminiApiProcess: ChildProcess | null = null;

/**
 * Launches geminiapi executable and resolves once the process has spawned successfully.
 * If the executable is missing or fails to start, it still resolves so the app can continue.
 */
const startGeminiApi = (): Promise<void> =>
  new Promise((resolve) => {
    try {
      let exePath: string | null = null;

      if (app.isPackaged) {
        const exeName = process.platform === 'win32' ? 'geminiapi.exe' : 'geminiapi';
        const exeDir = path.dirname(app.getPath('exe'));
        exePath = path.join(exeDir, exeName);
      } else {
        exePath = process.env.GEMINIAPI_PATH || null;
      }

      if (!exePath) {
        console.warn('GEMINIAPI_PATH env variable not set – geminiapi will not be started.');
        return resolve();
      }

      geminiApiProcess = spawn(exePath, [], {
        detached: false,
        stdio: 'ignore',
      });

      // Resolve when the process successfully starts
      geminiApiProcess.once('spawn', () => resolve());

      // If it errors out immediately, still resolve but warn
      geminiApiProcess.once('error', (err) => {
        console.error('Failed to launch geminiapi:', err);
        resolve();
      });
    } catch (err) {
      console.error('Exception while launching geminiapi:', err);
      resolve();
    }
  });

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Determine 80% of the primary display's work area
  const { width: screenW, height: screenH } = screen.getPrimaryDisplay().workAreaSize;
  const winWidth = Math.floor(screenW * 0.8);
  const winHeight = Math.floor(screenH * 0.8);

  // 1) Splash window – plain color matching React splash gradient start (black)
  const splash = new BrowserWindow({
    width: winWidth,
    height: winHeight,
    frame: false,
    transparent: false,
    resizable: false,
    movable: false,
    alwaysOnTop: true,
    show: true,
    backgroundColor: '#000000',
  });

  // Load nothing – just a blank window with backgroundColor
  splash.loadURL('data:text/html,<html><body style="margin:0;background:#000"></body></html>');

  // 2) Main window (hidden initially)
  const mainWindow = new BrowserWindow({
    width: winWidth,
    height: winHeight,
    center: true,
    show: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.setMenu(null);
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Once ready, show main window and close splash
  mainWindow.once('ready-to-show', () => {
    splash.destroy();
    mainWindow.show();
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  await startGeminiApi();

  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    callback({
      responseHeaders: {
        ...details.responseHeaders,
        'Content-Security-Policy': [
          "default-src 'self' 'unsafe-inline' 'unsafe-eval' data:; connect-src 'self' http://localhost:8080",
        ],
      },
    });
  });

  createWindow();
});


// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    // Ensure the geminiapi process is terminated when all windows are closed (for Windows/Linux)
    if (geminiApiProcess && !geminiApiProcess.killed) {
      try {
        geminiApiProcess.kill();
      } catch (err) {
        console.error('Error terminating geminiapi:', err);
      }
    }
    app.quit();
  }
});

// On macOS or when app quits via other means, also attempt to kill.
app.on('before-quit', () => {
  if (geminiApiProcess && !geminiApiProcess.killed) {
    try {
      geminiApiProcess.kill();
    } catch (err) {
      console.error('Error terminating geminiapi on before-quit:', err);
    }
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
